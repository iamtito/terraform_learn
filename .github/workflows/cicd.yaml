name: Terraform Deployment
on: 
  push:
    branches: [ "test", "dev", "preprod"]

  pull_request:
    types:
      - opened
      - edited
    paths:
      - 'dev/testApp/**.tf'
  
  workflow_dispatch:
    inputs:
      env:
        description: "Enter the env you want to deploy. Options: dev, staging, production"
        default: dev
        required: true
      deploy:
        description: "Enter the name of the application folder you want to deploy"
        default: ""
        required: true
# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#   # tf_working_dir: ""

jobs:
  pull_request:
    name: "Terraform Pull Requests"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "${{ github.workspace }}/dev/testApp"
    steps:
      - uses: actions/checkout@v2
      - run: echo "${{ toJson(github) }}"
      - name: Env construct
        run: |
          if ${{ github.event_name == 'push' }}; then
            ######## Push Event Logic ####
            if ${{ github.ref == 'refs/heads/dev' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='dev-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            elif ${{ github.ref == 'refs/heads/test' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='test-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            elif ${{ github.ref == 'refs/heads/main' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='preprod-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            fi
          elif ${{ github.event_name == 'pull_request' }}; then
            ######## Pull Request Logic ####
            if ${{ github.base_ref == 'dev' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='dev-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            elif ${{ github.base_ref == 'test' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='test-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            elif ${{ github.base_ref == 'main' }}; then
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "BRANCH='main-it'" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-1" >> $GITHUB_ENV
            fi
          fi
      
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: echo branch
        run: echo $BRANCH
      - name: echo branch with env
        run: echo ${{env.BRANCH}} with env
      - name: Init
        id: init
        run: terraform init

      - name: validate
        id: validate
        run: terraform validate -no-color

      - name: Plan
        id: plan
        run: terraform plan -no-color

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      # - name: Terraform Apply
      #   if: github.event.inputs.type == 'apply'
      #   id: apply
      #   run: terraform apply --auto-approve -no-color